# Docker Compose for DocQuery

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: docquery_postgres
    env_file:
      - ./backend/.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-docquery_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-docquery_427}
      POSTGRES_DB: ${POSTGRES_DB:-docquery}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-docquery_user} -d ${POSTGRES_DB:-docquery}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: docquery_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  backend:
    build: ./backend
    container_name: docquery_backend
    env_file:
      - ./backend/.env
    volumes:
      - ./backend/uploads:/app/uploads
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    command: >
      sh -c "
        python scripts/init_db.py &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000
      "

  # Celery Worker for background tasks
  celery_worker:
    build: ./backend
    container_name: docquery_celery_worker
    env_file:
      - ./backend/.env
    volumes:
      - ./backend/uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    command: celery -A app.tasks.celery_app worker --loglevel=info --concurrency=2

volumes:
  postgres_data:
  redis_data:
